#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("chatter-io-server:server");
var http = require("http");
const WebSocket = require("ws");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3002");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Websockets
const wss = new WebSocket.Server({ server });

wss.on("error", console.log);
wss.on("connection", (ws) => {
  ws.send("Connected successfully! Welcome to your chatroom!");
  ws.on("message", (data) => {
    let userList = [];
    let parsed = JSON.parse(data);

    //frontend client sends an initial message with the username, we collect it here.
    if(parsed.type === "initial") {
      ws.clientID = parsed.username;
    } 
    
    //add the clients to the userlist
    wss.clients.forEach((client) => {
      userList.push(client.clientID);
    });

    //broadcast the message to all connected clients
    wss.clients.forEach((client) => {
      let response = {
        data: parsed,
        userList: userList
      }

      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify(response));
      }
    });
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
